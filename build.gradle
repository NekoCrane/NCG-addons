buildscript {
    repositories {
        maven { url = "https://www.cursemaven.com" }
                maven { url = 'https://repo.spongepowered.org/maven' }
        //jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'maven-publish'


version = '0.1-1.16.5'
group = 'com.cn.NekoCrane' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ncg'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.




minecraft {

    mappings channel: 'snapshot', version: '20210309-1.16.5'

    runs {
        client {
            workingDirectory project.file('run')
            property "mixin.env.disableRefMap", "true"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            property 'forge.logging.console.level', 'debug'
            arg '-mixin.config=ncg.mixins.json'

            mods {
                ncg {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'debug'
            arg '-mixin.config=ncg.mixins.json'
            mods {
                ncg {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed. 
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'ncg', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            arg '-mixin.config=ncg.mixins.json'
            mods {
                ncg {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven { url = "https://www.cursemaven.com" }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {

    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'
    compile fg.deobf('curse.maven:obfuscate-289380:3169370')
    compile fg.deobf('curse.maven:controllable-317269:3196545')
    compile fg.deobf('curse.maven:mrcrayfishs-gun-mod-289479:3203497')


}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "NekoCrane's Gun Addon",
            "Specification-Vendor": "Dr.NekoCrane",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "Test Version",
            "Implementation-Vendor" :"Dr.NekoCrane",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


//jar.finalizedBy('reobfJar')


//publishing {
    //publications {
        //mavenJava(MavenPublication) {
            //artifact jar
        //}
   //}
    //repositories {
        //maven {
            //url "file:///${project.projectDir}/mcmodsrepo"
        //}
    //}
//}
